'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Time_ago = exports.Date_time_formatter = undefined;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _javascriptTimeAgo = require('javascript-time-ago');

var _javascriptTimeAgo2 = _interopRequireDefault(_javascriptTimeAgo);

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var global_scope = typeof window !== 'undefined' ? window : global;

var React_time_ago = function (_React$Component) {
	(0, _inherits3.default)(React_time_ago, _React$Component);

	function React_time_ago(props, context) {
		(0, _classCallCheck3.default)(this, React_time_ago);

		var _this = (0, _possibleConstructorReturn3.default)(this, (React_time_ago.__proto__ || (0, _getPrototypeOf2.default)(React_time_ago)).call(this, props, context));

		var locale = props.locale,
		    date_time_format = props.date_time_format,
		    update_interval = props.update_interval;

		// If `locale` was not explicitly set
		// then try to derive it from `react-intl` context

		if (!locale) {
			// supports `react-intl`
			if (context.intl) {
				locale = context.intl.locale;
			}
		}

		// If no locale is set, then throw an error
		if (!locale) {
			throw new Error('No locale specified for react-time-ago');
		}

		// `_react_time_ago` holds cached formatters
		// and the global refresh timer
		if (!global_scope._react_time_ago) {
			create_react_time_ago(update_interval);
		}

		// Take `javascript-time-ago` formatter and 
		// `Intl.DateTimeFormat` verbose formatter from cache
		_this.time_ago = new Time_ago(locale);
		_this.date_time_formatter = new Date_time_formatter(locale, date_time_format);
		return _this;
	}

	(0, _createClass3.default)(React_time_ago, [{
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(nextProps, nextState) {
			return (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var tick = this.props.tick;


			if (tick) {
				this.register();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var tick = this.props.tick;


			if (tick) {
				this.unregister();
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    wrapper = _props.wrapper,
			    time_style = _props.time_style,
			    timeStyle = _props.timeStyle,
			    style = _props.style,
			    className = _props.className;


			if (!children) {
				throw new Error('You are required to specify either a timestamp (in milliseconds) or Date as a child of react-time-ago component');
			}

			var full_date = this.full_date(children);

			var date = children instanceof Date && children;
			var time = typeof children === 'number' && children;

			var markup = _react2.default.createElement(
				'time',
				{
					dateTime: (date || new Date(time)).toISOString(),
					title: wrapper ? undefined : full_date,
					style: style,
					className: className },
				this.time_ago.format(time || date, time_style || timeStyle)
			);

			if (wrapper) {
				return _react2.default.createElement(wrapper, { verbose: full_date }, markup);
			}

			return markup;
		}

		// Verbose date string.
		// Is used as a tooltip text.
		//
		// E.g. "Sunday, May 18th, 2012, 18:45"
		//

	}, {
		key: 'full_date',
		value: function full_date(input) {
			if (this.props.full) {
				return this.props.full(input);
			}

			var date = void 0;

			if (input.constructor === Date) {
				date = input;
			} else if (typeof input === 'number') {
				date = new Date(input);
			} else {
				throw new Error('Unsupported react-time-ago input: ' + (typeof input === 'undefined' ? 'undefined' : (0, _typeof3.default)(input)) + ', ' + input);
			}

			return this.date_time_formatter.format(date);
		}
	}, {
		key: 'register',
		value: function register() {
			global_scope._react_time_ago._register(this);
		}
	}, {
		key: 'unregister',
		value: function unregister() {
			global_scope._react_time_ago._unregister(this);
		}
	}]);
	return React_time_ago;
}(_react2.default.Component);

React_time_ago.propTypes = {
	locale: _propTypes2.default.string,
	children: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.number]),
	// `javascript-time-ago` relative time formatting style
	time_style: _propTypes2.default.any,
	timeStyle: _propTypes2.default.any,
	// (optional) Tooltip date formatter
	full: _propTypes2.default.func,
	// Intl.DateTimeFormat options
	date_time_format: _propTypes2.default.object,
	update_interval: _propTypes2.default.number,
	wrapper: _propTypes2.default.func,
	tick: _propTypes2.default.bool.isRequired,
	style: _propTypes2.default.object,
	className: _propTypes2.default.string
};
React_time_ago.defaultProps = {
	// Thursday, December 20, 2012, 7:00:00 AM GMT+4
	date_time_format: {
		weekday: 'long',
		day: 'numeric',
		month: 'long',
		year: 'numeric',
		hour: 'numeric',
		minute: '2-digit',
		second: '2-digit'
	},

	// Updates once a minute
	update_interval: 60 * 1000,

	tick: true
};
React_time_ago.contextTypes = {
	intl: _propTypes2.default.object
};
exports.default = React_time_ago;


function start_relative_times_updater(update_interval) {
	function update_relative_times(dry_run) {
		if (!dry_run) {
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = (0, _getIterator3.default)(global_scope._react_time_ago._components), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var component = _step.value;

					component.forceUpdate();
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}

		global_scope._react_time_ago._timer = setTimeout(update_relative_times, update_interval);
	}

	update_relative_times(true);
}

function stop_relative_times_updater() {
	if (global_scope._react_time_ago._timer) {
		clearTimeout(global_scope._react_time_ago._timer);
		global_scope._react_time_ago._timer = undefined;
	}
}

function create_react_time_ago(update_interval) {
	var _react_time_ago = {
		_components: [],
		_register: function _register(component) {
			this._components.push(component);

			// If it's the first relative time component,
			// start periodical time refresh.
			if (this._components.length === 1) {
				start_relative_times_updater(update_interval);
			}
		},
		_unregister: function _unregister(component) {
			remove_element_from_array(this._components, component);

			// If it was the last relative time component,
			// stop periodical time refresh.
			if (this._components.length === 0) {
				stop_relative_times_updater();
			}
		},
		_destroy: function _destroy() {
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = (0, _getIterator3.default)(this._components), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var component = _step2.value;

					this._unregister(component);
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			delete global_scope._react_time_ago;
		}
	};

	global_scope._react_time_ago = _react_time_ago;
}

function remove_element_from_array(array, element) {
	var index = array.indexOf(element);
	if (index >= 0) {
		array.splice(index, 1);
	}
	return array;
}

var Date_time_formatter = exports.Date_time_formatter = function () {
	function Date_time_formatter(locale) {
		var date_time_format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : React_time_ago.defaultProps.date_time_format;
		(0, _classCallCheck3.default)(this, Date_time_formatter);

		// Formatters
		if (!global_scope._date_time_formatters) {
			global_scope._date_time_formatters = {};
		}

		// Formatters for this locale
		if (!global_scope._date_time_formatters[locale]) {
			global_scope._date_time_formatters[locale] = {};
		}

		// `Intl.DateTimeFormat` format caching key
		var date_time_format_id = (0, _stringify2.default)(date_time_format);

		// Cache `Intl.DateTimeFormat` for this locale
		if (!global_scope._date_time_formatters[locale][date_time_format_id]) {
			global_scope._date_time_formatters[locale][date_time_format_id] = new Intl.DateTimeFormat(locale, date_time_format);
		}

		this.formatter = global_scope._date_time_formatters[locale][date_time_format_id];
	}

	(0, _createClass3.default)(Date_time_formatter, [{
		key: 'format',
		value: function format(date) {
			return this.formatter.format(date);
		}
	}]);
	return Date_time_formatter;
}();

var Time_ago = exports.Time_ago = function () {
	function Time_ago(locale) {
		(0, _classCallCheck3.default)(this, Time_ago);

		// Formatters
		if (!global_scope._time_ago_formatters) {
			global_scope._time_ago_formatters = {};
		}

		// Cache `javascript-time-ago` formatter for this locale
		if (!global_scope._time_ago_formatters[locale]) {
			global_scope._time_ago_formatters[locale] = new _javascriptTimeAgo2.default(locale);
		}

		this.formatter = global_scope._time_ago_formatters[locale];
	}

	(0, _createClass3.default)(Time_ago, [{
		key: 'format',
		value: function format(date, time_style) {
			return this.formatter.format(date, this.parse_time_ago_style(time_style));
		}
	}, {
		key: 'parse_time_ago_style',
		value: function parse_time_ago_style(time_style) {
			if (!time_style) {
				return;
			}

			if (typeof time_style === 'string') {
				if (!this.formatter_styles[time_style]) {
					this.formatter_styles[time_style] = this.formatter.style[time_style]();
				}

				return this.formatter_styles[time_style];
			} else if ((typeof time_style === 'undefined' ? 'undefined' : (0, _typeof3.default)(time_style)) === 'object') {
				return time_style;
			} else {
				throw new Error('Unknown time formatter style: ' + time_style);
			}
		}
	}]);
	return Time_ago;
}();
//# sourceMappingURL=react time ago.js.map